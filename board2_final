//buzzer 7-segment
#include <SoftwareSerial.h>
SoftwareSerial mySerial(11,10);
//-----------------------------------------------add song start
#define num_of_song 9
#define duration__note 300
enum {song1,song2,song3,song4,song5,song6,song7,song8,song9};

const int len_note[] = {25,26,42,46,44,26,35,40,27};
int NooMaLee[] = {330,294,262,294,330,330,330,294,294,294,330,392,392,330,294,262,294,330,330,330,294,294,330,294,262};

int HBD[] = {262,262,294,262,339,330,262,262,294,262,339,330,262,262,523,440,349,330,294,262,494,494,440,349,392,349};

int LittleStar[] = {392,392,587,587,659,659,587,523,523,494,494,440,440,392,
                    587,587,523,523,494,494,440,587,587,523,523,494,494,440,
                    392,392,587,587,659,659,587,523,523,494,494,440,440,392};

int Spider[] = {262,262,262,294,330, 330,330,294,262,294,330,262, 330,330,330,349,392,392,349,330,349,392,294, 
                262,262,262,294,330, 330,294,262,294,330,262, 262,262,262,294,330, 330,330,294,262,294,330,262,};
                
int JingleBell ={330,330,330, 330,330,330, 330,392,262,294,330,
                 349,349,349, 330,330,330, 330,294,294,330, 294,
                 330,330,330, 330,330,330, 330,392,262,294,330,
                 349,349,349, 330,330,330, 392,392,349,294,262};
                 
int Wall[] = {330,392,262, 440,523,349, 440,494,392,440,494,587,523, 330,392,262, 440,523,349, 440,494,392,440,494,587,523};

int Elephant = {392,392,392, 392,330,294,392,392,262, 392,330,294,330,262,294, 262,220,262,262,220,196,262, 
                262,220,196,262,220,192,262, 392,440,392,330,294,262};
                
int DuckInWater = {392,392,392, 294,294,587,494,440, 440,392,370,392,440, 587,494,440,394,330,394,394,
                   392,392,392, 294,294,587,494,440, 440,392,370,392,440, 587,494,440,394,330,394,394};
                   
int BabyShark = {294, 330, 394, 394,394,394,394,394, 294, 330, 394, 394,394,394,394,394, 294, 330, 394, 394,394,394,394,394, 294, 330, 394 };


const int segmentPins[9]= {9,8,4,5,7,12,13};
int bitPattern[] = {
  0b11111001, //1
  0b10100100, //2
  0b10110000, //3 
  0b00000000, //4
  0b00000000, //5
  0b00000000, //6
  0b00000000, //7
  0b00000000, //8
  0b00000000, //9
};
//-----------------------------------------------add song end



const byte numPins = 8;
const int SpeakerPin = 6;
int current_song;
int current_note=0;
bool is_play=false;
long duration_time=0;
long lasttime=0;

void play_music()
{
  //เหมือนกับการ is_play == flase
  if(!is_play). //แค่ define ว่าถ้าเป็น True ให้ทำฟังชันก์นี้ ไม่ได้หมายถึง ว่า true คือเล่นเพลง
  {
    noTone(SpeakerPin);
  }
  else
  {
    //สมมุติโน๊ต A กำหนดให้เล่น 500ms
    //ที่ต้องบวกไปเรื่อยๆ เพราะใน loop แต่ละรอบ อาจจะเล่นได้ 5ms,7ms,10ms แล้วก็ตรวจสอบว่ารอบไหนที
    //ที่ต้องหยุดแล้วเปลี่ยนโนีต
    duration_time+=millis()-lasttime; //lasttime คือที่เรากด play ครั้งล่าสุด
    lasttime=millis();
    if(duration_time>=duration__note) //
    {
      duration_time=0;
      current_note++;
    }
    if(current_note>=len_note[current_song]) //ถ้าเล่นจบเพลงก็จะหยุดเพลง
    {
      is_play=false;
      duration_time=0;
      mySerial.print('n'); 
    }
    else
      //-----------------------------------------------add song start
      switch(current_song)    
      {
        case song1:
          tone(SpeakerPin, NooMaLee[current_note]);
          break;
        case song2:
          tone(SpeakerPin, HBD[current_note]);
          break;
        case song3:
          tone(SpeakerPin, LittleStar[current_note]);
          break;
          case song4:
          tone(SpeakerPin, Spider[current_note]);
          break;
        case song5:
          tone(SpeakerPin, JingleBell[current_note]);
          break;
        case song6:
          tone(SpeakerPin, Wall[current_note]);
          break;
          case song7:
          tone(SpeakerPin, Elephant[current_note]);
          break;
        case song8:
          tone(SpeakerPin, DuckInWater[current_note]);
          break;
        case song9:
          tone(SpeakerPin, BabyShark[current_note]);
          break;
      }
      //-----------------------------------------------add song end
  }
}
void show_seg()
{
  for (int i=0; i<numPins; i++){
    boolean isBitSet = bitRead(bitPattern[current_song], i);
    digitalWrite(segmentPins[i],isBitSet);    
  }
}

void setup() {
   Serial.begin(9600);
   mySerial.begin(9600);
  
  for (int i=0; i<numPins; i++){
    pinMode(segmentPins[i], OUTPUT);
  }

  pinMode(SpeakerPin, OUTPUT);
}

void loop(){
  if(mySerial.available()){
    String text = mySerial.readString();
    text.trim(); // ตัดช่องว่างและ \r\n ออก
    Serial.println(text);
  
    int index = text.indexOf(',');
    String button = text.substring(0,index);
    String current = text.substring(index+1);
    


    if(button == "before"){
      current_song = current.toInt();
      Serial.println("State Before");
      Serial.print("Current Song = "); Serial.println(current_song);
      current_note=0;
      is_play=false;
    }
    else if(button == "next"){
      current_song = current.toInt();
      Serial.println("State Next");
      Serial.print("Current Song = "); Serial.println(current_song);
      current_note=0;
      is_play=false;
    }
    else if(button == "play"){
      Serial.println("State Play");
      is_play=true;
      lasttime=millis();
      Serial.println(current_song);
    }
    else if(button == "stop"){
      Serial.println("State Stop");
      is_play=false;
    }
    else if(button == "idle"){
      Serial.println("State Idle");
      is_play=false;
      current_note=0;
    }
  }
  show_seg();
  play_music();
}
